{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMauC3Em8Y5lO+otcTolBlg",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ankurkr0064/perceptron/blob/main/Handwritten%20digit%20recognition\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6GrqPbrOzHSp",
        "outputId": "bc341ba6-23a0-4e74-dac3-58726f728e7a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/3\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m77s\u001b[0m 101ms/step - accuracy: 0.8000 - loss: 0.6129 - val_accuracy: 0.9822 - val_loss: 0.0629\n",
            "Epoch 2/3\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 110ms/step - accuracy: 0.9652 - loss: 0.1143 - val_accuracy: 0.9862 - val_loss: 0.0471\n",
            "Epoch 3/3\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m137s\u001b[0m 104ms/step - accuracy: 0.9755 - loss: 0.0810 - val_accuracy: 0.9893 - val_loss: 0.0394\n",
            "313/313 - 5s - 15ms/step - accuracy: 0.9892 - loss: 0.0324\n",
            "Test Accuracy: 0.99\n",
            "Image loaded successfully with shape: (150, 149)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 89ms/step\n",
            "Prediction probabilities: [[4.0476015e-03 9.7567845e-06 1.5771542e-03 4.2935706e-05 7.7060581e-04\n",
            "  3.8773741e-04 9.9289227e-01 2.7804315e-06 2.6688247e-04 2.3174393e-06]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The predicted class for the handwritten image is: 6\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.datasets import mnist\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Input\n",
        "import cv2  # OpenCV for image processing\n",
        "import matplotlib.pyplot as plt  # For displaying the image\n",
        "import os  # For checking file existence\n",
        "\n",
        "# Load and preprocess the MNIST dataset\n",
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
        "\n",
        "# Normalize the images to [0, 1] and reshape to include the channel dimension\n",
        "x_train = x_train / 255.0\n",
        "x_test = x_test / 255.0\n",
        "x_train = np.expand_dims(x_train, axis=-1)  # Add channel dimension\n",
        "x_test = np.expand_dims(x_test, axis=-1)\n",
        "\n",
        "# One-hot encode the labels\n",
        "y_train = to_categorical(y_train, num_classes=10)\n",
        "y_test = to_categorical(y_test, num_classes=10)\n",
        "\n",
        "# Build the CNN model\n",
        "model = Sequential([\n",
        "    Input(shape=(28, 28, 1)),  # Input shape with channel dimension\n",
        "    Conv2D(32, (3, 3), activation='relu', padding='same'),\n",
        "    MaxPooling2D((2, 2)),\n",
        "    Dropout(0.25),\n",
        "    Conv2D(64, (3, 3), activation='relu', padding='same'),\n",
        "    MaxPooling2D((2, 2)),\n",
        "    Dropout(0.25),\n",
        "    Flatten(),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer='adam',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "# Train the model\n",
        "model.fit(x_train, y_train, epochs=3, batch_size=64, validation_split=0.2)\n",
        "\n",
        "# Evaluate the model on test data\n",
        "test_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=2)\n",
        "print(f\"Test Accuracy: {test_accuracy:.2f}\")\n",
        "\n",
        "# Function to preprocess and predict for a new handwritten digit\n",
        "def predict_handwritten_image(image_path):\n",
        "    # Check if the image path is valid\n",
        "    if not os.path.exists(image_path):\n",
        "        print(f\"Image not found: {image_path}\")\n",
        "        return\n",
        "\n",
        "    # Load the image using OpenCV\n",
        "    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)  # Load in grayscale\n",
        "    if img is None:\n",
        "        print(f\"Failed to load image from {image_path}\")\n",
        "        return\n",
        "    print(f\"Image loaded successfully with shape: {img.shape}\")\n",
        "\n",
        "    # Resize to 28x28 pixels\n",
        "    img = cv2.resize(img, (28, 28))  # Resize to 28x28 pixels\n",
        "    img = img / 255.0  # Normalize the image to [0, 1]\n",
        "\n",
        "    # Reshape to match the input shape (1, 28, 28, 1)\n",
        "    img = np.expand_dims(img, axis=(0, -1))  # Add batch and channel dimensions\n",
        "\n",
        "    # Visualize the preprocessed image\n",
        "    plt.imshow(img[0, :, :, 0], cmap='gray')\n",
        "    plt.title(\"Preprocessed Image\")\n",
        "    plt.show()\n",
        "\n",
        "    # Predict the class using the trained model\n",
        "    predictions = model.predict(img)\n",
        "\n",
        "    # Print the prediction probabilities for debugging\n",
        "    print(f\"Prediction probabilities: {predictions}\")\n",
        "\n",
        "    # Get the predicted class (index of the maximum probability)\n",
        "    predicted_class = np.argmax(predictions, axis=1)[0]  # Get the class index\n",
        "\n",
        "    # Display the image and prediction\n",
        "    plt.imshow(img[0, :, :, 0], cmap='gray')\n",
        "    plt.title(f\"Predicted Class: {predicted_class}\")\n",
        "    plt.show()\n",
        "\n",
        "    return predicted_class\n",
        "\n",
        "# Example usage:\n",
        "# Provide the path to your handwritten digit image\n",
        "image_path = r\"/content/6.jpg\"  # Update the path to your image\n",
        "predicted_class = predict_handwritten_image(image_path)\n",
        "print(f\"The predicted class for the handwritten image is: {predicted_class}\")\n"
      ]
    }
  ]
}